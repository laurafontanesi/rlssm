{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Parameter recovery of the hierarchical DDM with starting point bias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import rlssm\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate group data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from rlssm.random import simulate_hier_ddm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = simulate_hier_ddm(n_trials=200, \n",
    "                         n_participants=10,\n",
    "                         gen_mu_drift=.6, gen_sd_drift=.1,\n",
    "                         gen_mu_threshold=.5, gen_sd_threshold=.1,\n",
    "                         gen_mu_ndt=0, gen_sd_ndt=.01,\n",
    "                         gen_mu_rel_sp=.1, gen_sd_rel_sp=.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>drift</th>\n",
       "      <th>threshold</th>\n",
       "      <th>ndt</th>\n",
       "      <th>rel_sp</th>\n",
       "      <th>rt</th>\n",
       "      <th>accuracy</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>participant</th>\n",
       "      <th>trial</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">1</th>\n",
       "      <th>1</th>\n",
       "      <td>0.623365</td>\n",
       "      <td>0.997041</td>\n",
       "      <td>0.692471</td>\n",
       "      <td>0.539151</td>\n",
       "      <td>0.716471</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.623365</td>\n",
       "      <td>0.997041</td>\n",
       "      <td>0.692471</td>\n",
       "      <td>0.539151</td>\n",
       "      <td>0.902471</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.623365</td>\n",
       "      <td>0.997041</td>\n",
       "      <td>0.692471</td>\n",
       "      <td>0.539151</td>\n",
       "      <td>0.793471</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.623365</td>\n",
       "      <td>0.997041</td>\n",
       "      <td>0.692471</td>\n",
       "      <td>0.539151</td>\n",
       "      <td>0.980471</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.623365</td>\n",
       "      <td>0.997041</td>\n",
       "      <td>0.692471</td>\n",
       "      <td>0.539151</td>\n",
       "      <td>1.739471</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      drift  threshold       ndt    rel_sp        rt  accuracy\n",
       "participant trial                                                             \n",
       "1           1      0.623365   0.997041  0.692471  0.539151  0.716471       1.0\n",
       "            1      0.623365   0.997041  0.692471  0.539151  0.902471       1.0\n",
       "            1      0.623365   0.997041  0.692471  0.539151  0.793471       1.0\n",
       "            1      0.623365   0.997041  0.692471  0.539151  0.980471       0.0\n",
       "            1      0.623365   0.997041  0.692471  0.539151  1.739471       1.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">rt</th>\n",
       "      <th colspan=\"8\" halign=\"left\">accuracy</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>participant</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>200.0</td>\n",
       "      <td>0.951961</td>\n",
       "      <td>0.228372</td>\n",
       "      <td>0.710471</td>\n",
       "      <td>0.796221</td>\n",
       "      <td>0.888471</td>\n",
       "      <td>1.012721</td>\n",
       "      <td>2.130471</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.680</td>\n",
       "      <td>0.467647</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>200.0</td>\n",
       "      <td>0.977915</td>\n",
       "      <td>0.226304</td>\n",
       "      <td>0.730590</td>\n",
       "      <td>0.816340</td>\n",
       "      <td>0.919590</td>\n",
       "      <td>1.074590</td>\n",
       "      <td>2.046590</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.650</td>\n",
       "      <td>0.478167</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>200.0</td>\n",
       "      <td>0.999711</td>\n",
       "      <td>0.246408</td>\n",
       "      <td>0.728586</td>\n",
       "      <td>0.829836</td>\n",
       "      <td>0.935586</td>\n",
       "      <td>1.111336</td>\n",
       "      <td>2.373586</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.675</td>\n",
       "      <td>0.469550</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>200.0</td>\n",
       "      <td>0.926358</td>\n",
       "      <td>0.171244</td>\n",
       "      <td>0.720133</td>\n",
       "      <td>0.794883</td>\n",
       "      <td>0.892133</td>\n",
       "      <td>1.008383</td>\n",
       "      <td>1.610133</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.695</td>\n",
       "      <td>0.461563</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>200.0</td>\n",
       "      <td>0.885120</td>\n",
       "      <td>0.165347</td>\n",
       "      <td>0.708605</td>\n",
       "      <td>0.774355</td>\n",
       "      <td>0.831605</td>\n",
       "      <td>0.923105</td>\n",
       "      <td>1.585605</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.485338</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>200.0</td>\n",
       "      <td>0.939961</td>\n",
       "      <td>0.198498</td>\n",
       "      <td>0.711296</td>\n",
       "      <td>0.809296</td>\n",
       "      <td>0.900296</td>\n",
       "      <td>1.028546</td>\n",
       "      <td>2.424296</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.655</td>\n",
       "      <td>0.476561</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>200.0</td>\n",
       "      <td>0.909842</td>\n",
       "      <td>0.185368</td>\n",
       "      <td>0.703557</td>\n",
       "      <td>0.785057</td>\n",
       "      <td>0.844057</td>\n",
       "      <td>0.984807</td>\n",
       "      <td>2.023557</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.720</td>\n",
       "      <td>0.450126</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>200.0</td>\n",
       "      <td>0.902757</td>\n",
       "      <td>0.165986</td>\n",
       "      <td>0.710047</td>\n",
       "      <td>0.790047</td>\n",
       "      <td>0.854547</td>\n",
       "      <td>0.967047</td>\n",
       "      <td>1.645047</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.635</td>\n",
       "      <td>0.482638</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>200.0</td>\n",
       "      <td>0.892931</td>\n",
       "      <td>0.151139</td>\n",
       "      <td>0.711606</td>\n",
       "      <td>0.777356</td>\n",
       "      <td>0.852106</td>\n",
       "      <td>0.968856</td>\n",
       "      <td>1.604606</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.735</td>\n",
       "      <td>0.442441</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>200.0</td>\n",
       "      <td>0.955701</td>\n",
       "      <td>0.230286</td>\n",
       "      <td>0.726306</td>\n",
       "      <td>0.810306</td>\n",
       "      <td>0.901306</td>\n",
       "      <td>1.023556</td>\n",
       "      <td>2.345306</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.705</td>\n",
       "      <td>0.457187</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                rt                                                    \\\n",
       "             count      mean       std       min       25%       50%   \n",
       "participant                                                            \n",
       "1            200.0  0.951961  0.228372  0.710471  0.796221  0.888471   \n",
       "2            200.0  0.977915  0.226304  0.730590  0.816340  0.919590   \n",
       "3            200.0  0.999711  0.246408  0.728586  0.829836  0.935586   \n",
       "4            200.0  0.926358  0.171244  0.720133  0.794883  0.892133   \n",
       "5            200.0  0.885120  0.165347  0.708605  0.774355  0.831605   \n",
       "6            200.0  0.939961  0.198498  0.711296  0.809296  0.900296   \n",
       "7            200.0  0.909842  0.185368  0.703557  0.785057  0.844057   \n",
       "8            200.0  0.902757  0.165986  0.710047  0.790047  0.854547   \n",
       "9            200.0  0.892931  0.151139  0.711606  0.777356  0.852106   \n",
       "10           200.0  0.955701  0.230286  0.726306  0.810306  0.901306   \n",
       "\n",
       "                                accuracy                                       \\\n",
       "                  75%       max    count   mean       std  min  25%  50%  75%   \n",
       "participant                                                                     \n",
       "1            1.012721  2.130471    200.0  0.680  0.467647  0.0  0.0  1.0  1.0   \n",
       "2            1.074590  2.046590    200.0  0.650  0.478167  0.0  0.0  1.0  1.0   \n",
       "3            1.111336  2.373586    200.0  0.675  0.469550  0.0  0.0  1.0  1.0   \n",
       "4            1.008383  1.610133    200.0  0.695  0.461563  0.0  0.0  1.0  1.0   \n",
       "5            0.923105  1.585605    200.0  0.625  0.485338  0.0  0.0  1.0  1.0   \n",
       "6            1.028546  2.424296    200.0  0.655  0.476561  0.0  0.0  1.0  1.0   \n",
       "7            0.984807  2.023557    200.0  0.720  0.450126  0.0  0.0  1.0  1.0   \n",
       "8            0.967047  1.645047    200.0  0.635  0.482638  0.0  0.0  1.0  1.0   \n",
       "9            0.968856  1.604606    200.0  0.735  0.442441  0.0  0.0  1.0  1.0   \n",
       "10           1.023556  2.345306    200.0  0.705  0.457187  0.0  0.0  1.0  1.0   \n",
       "\n",
       "                  \n",
       "             max  \n",
       "participant       \n",
       "1            1.0  \n",
       "2            1.0  \n",
       "3            1.0  \n",
       "4            1.0  \n",
       "5            1.0  \n",
       "6            1.0  \n",
       "7            1.0  \n",
       "8            1.0  \n",
       "9            1.0  \n",
       "10           1.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.groupby('participant').describe()[['rt', 'accuracy']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialize the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using cached StanModel\n"
     ]
    }
   ],
   "source": [
    "model = rlssm.DDModel(hierarchical_levels = 2, starting_point_bias=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sampling parameters\n",
    "n_iter = 5000\n",
    "n_chains = 2\n",
    "n_thin = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting the model using the priors:\n",
      "drift_priors {'mu_mu': 1, 'sd_mu': 5, 'mu_sd': 0, 'sd_sd': 5}\n",
      "threshold_priors {'mu_mu': 1, 'sd_mu': 3, 'mu_sd': 0, 'sd_sd': 3}\n",
      "ndt_priors {'mu_mu': 1, 'sd_mu': 1, 'mu_sd': 0, 'sd_sd': 1}\n",
      "rel_sp_priors {'mu_mu': 0, 'sd_mu': 1, 'mu_sd': 0, 'sd_sd': 1}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:Maximum (flat) parameter count (1000) exceeded: skipping diagnostic tests for n_eff and Rhat.\n",
      "To run all diagnostics call pystan.check_hmc_diagnostics(fit)\n",
      "WARNING:pystan:3 of 5000 iterations ended with a divergence (0.06 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checks MCMC diagnostics:\n",
      "n_eff / iter looks reasonable for all parameters\n",
      "3.0 of 5000 iterations ended with a divergence (0.06%)\n",
      "  Try running with larger adapt_delta to remove the divergences\n",
      "0 of 5000 iterations saturated the maximum tree depth of 10 (0.0%)\n",
      "E-BFMI indicated no pathological behavior\n"
     ]
    }
   ],
   "source": [
    "model_fit = model.fit(\n",
    "    data,\n",
    "    thin = n_thin,\n",
    "    iter = n_iter,\n",
    "    chains = n_chains,\n",
    "    verbose = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### get Rhat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rhat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>48.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.000329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.000791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.999604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.999880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.003618</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            rhat\n",
       "count  48.000000\n",
       "mean    1.000329\n",
       "std     0.000791\n",
       "min     0.999604\n",
       "25%     0.999880\n",
       "50%     1.000038\n",
       "75%     1.000444\n",
       "max     1.003618"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.rhat.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### calculate wAIC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'lppd': -138.87336841598818,\n",
       " 'p_waic': 23.687615971055777,\n",
       " 'waic': 325.1219687740879,\n",
       " 'waic_se': 92.20297977041197}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.waic"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Posteriors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>chain</th>\n",
       "      <th>draw</th>\n",
       "      <th>transf_mu_drift</th>\n",
       "      <th>transf_mu_threshold</th>\n",
       "      <th>transf_mu_ndt</th>\n",
       "      <th>transf_mu_rel_sp</th>\n",
       "      <th>drift_sbj[1]</th>\n",
       "      <th>drift_sbj[2]</th>\n",
       "      <th>drift_sbj[3]</th>\n",
       "      <th>drift_sbj[4]</th>\n",
       "      <th>...</th>\n",
       "      <th>rel_sp_sbj[1]</th>\n",
       "      <th>rel_sp_sbj[2]</th>\n",
       "      <th>rel_sp_sbj[3]</th>\n",
       "      <th>rel_sp_sbj[4]</th>\n",
       "      <th>rel_sp_sbj[5]</th>\n",
       "      <th>rel_sp_sbj[6]</th>\n",
       "      <th>rel_sp_sbj[7]</th>\n",
       "      <th>rel_sp_sbj[8]</th>\n",
       "      <th>rel_sp_sbj[9]</th>\n",
       "      <th>rel_sp_sbj[10]</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5000.00000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.50000</td>\n",
       "      <td>1249.500000</td>\n",
       "      <td>0.615952</td>\n",
       "      <td>1.009498</td>\n",
       "      <td>0.691726</td>\n",
       "      <td>0.530285</td>\n",
       "      <td>0.603799</td>\n",
       "      <td>0.576879</td>\n",
       "      <td>0.599734</td>\n",
       "      <td>0.642007</td>\n",
       "      <td>...</td>\n",
       "      <td>0.536195</td>\n",
       "      <td>0.526231</td>\n",
       "      <td>0.522930</td>\n",
       "      <td>0.526576</td>\n",
       "      <td>0.520650</td>\n",
       "      <td>0.492087</td>\n",
       "      <td>0.568101</td>\n",
       "      <td>0.520123</td>\n",
       "      <td>0.549857</td>\n",
       "      <td>0.539313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.50005</td>\n",
       "      <td>721.759958</td>\n",
       "      <td>0.065815</td>\n",
       "      <td>0.030910</td>\n",
       "      <td>0.002199</td>\n",
       "      <td>0.012904</td>\n",
       "      <td>0.090243</td>\n",
       "      <td>0.093931</td>\n",
       "      <td>0.088017</td>\n",
       "      <td>0.093087</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018094</td>\n",
       "      <td>0.017883</td>\n",
       "      <td>0.018320</td>\n",
       "      <td>0.017435</td>\n",
       "      <td>0.017763</td>\n",
       "      <td>0.020995</td>\n",
       "      <td>0.021740</td>\n",
       "      <td>0.017393</td>\n",
       "      <td>0.019104</td>\n",
       "      <td>0.018017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.350688</td>\n",
       "      <td>0.860374</td>\n",
       "      <td>0.681198</td>\n",
       "      <td>0.475725</td>\n",
       "      <td>0.093595</td>\n",
       "      <td>0.157550</td>\n",
       "      <td>0.190691</td>\n",
       "      <td>0.282644</td>\n",
       "      <td>...</td>\n",
       "      <td>0.469905</td>\n",
       "      <td>0.460770</td>\n",
       "      <td>0.455520</td>\n",
       "      <td>0.465381</td>\n",
       "      <td>0.450294</td>\n",
       "      <td>0.414656</td>\n",
       "      <td>0.506434</td>\n",
       "      <td>0.461902</td>\n",
       "      <td>0.484085</td>\n",
       "      <td>0.466391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.00000</td>\n",
       "      <td>624.750000</td>\n",
       "      <td>0.572878</td>\n",
       "      <td>0.990568</td>\n",
       "      <td>0.690373</td>\n",
       "      <td>0.522065</td>\n",
       "      <td>0.549763</td>\n",
       "      <td>0.520853</td>\n",
       "      <td>0.544895</td>\n",
       "      <td>0.581498</td>\n",
       "      <td>...</td>\n",
       "      <td>0.524433</td>\n",
       "      <td>0.514626</td>\n",
       "      <td>0.510905</td>\n",
       "      <td>0.515375</td>\n",
       "      <td>0.509454</td>\n",
       "      <td>0.477564</td>\n",
       "      <td>0.552796</td>\n",
       "      <td>0.508784</td>\n",
       "      <td>0.536325</td>\n",
       "      <td>0.527094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.50000</td>\n",
       "      <td>1249.500000</td>\n",
       "      <td>0.615384</td>\n",
       "      <td>1.009284</td>\n",
       "      <td>0.691617</td>\n",
       "      <td>0.530185</td>\n",
       "      <td>0.604913</td>\n",
       "      <td>0.584693</td>\n",
       "      <td>0.601593</td>\n",
       "      <td>0.633981</td>\n",
       "      <td>...</td>\n",
       "      <td>0.535846</td>\n",
       "      <td>0.526326</td>\n",
       "      <td>0.523374</td>\n",
       "      <td>0.527026</td>\n",
       "      <td>0.521320</td>\n",
       "      <td>0.492551</td>\n",
       "      <td>0.567758</td>\n",
       "      <td>0.520566</td>\n",
       "      <td>0.549263</td>\n",
       "      <td>0.538623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.00000</td>\n",
       "      <td>1874.250000</td>\n",
       "      <td>0.659705</td>\n",
       "      <td>1.028144</td>\n",
       "      <td>0.693001</td>\n",
       "      <td>0.538358</td>\n",
       "      <td>0.660774</td>\n",
       "      <td>0.638983</td>\n",
       "      <td>0.656278</td>\n",
       "      <td>0.694858</td>\n",
       "      <td>...</td>\n",
       "      <td>0.548069</td>\n",
       "      <td>0.537657</td>\n",
       "      <td>0.535127</td>\n",
       "      <td>0.538225</td>\n",
       "      <td>0.532493</td>\n",
       "      <td>0.506852</td>\n",
       "      <td>0.582966</td>\n",
       "      <td>0.531734</td>\n",
       "      <td>0.562528</td>\n",
       "      <td>0.551173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.00000</td>\n",
       "      <td>2499.000000</td>\n",
       "      <td>0.961835</td>\n",
       "      <td>1.160558</td>\n",
       "      <td>0.704329</td>\n",
       "      <td>0.589211</td>\n",
       "      <td>0.934712</td>\n",
       "      <td>0.990759</td>\n",
       "      <td>0.994084</td>\n",
       "      <td>1.178273</td>\n",
       "      <td>...</td>\n",
       "      <td>0.602393</td>\n",
       "      <td>0.590122</td>\n",
       "      <td>0.599665</td>\n",
       "      <td>0.592212</td>\n",
       "      <td>0.595451</td>\n",
       "      <td>0.551932</td>\n",
       "      <td>0.638467</td>\n",
       "      <td>0.586136</td>\n",
       "      <td>0.617997</td>\n",
       "      <td>0.610974</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 46 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            chain         draw  transf_mu_drift  transf_mu_threshold  \\\n",
       "count  5000.00000  5000.000000      5000.000000          5000.000000   \n",
       "mean      0.50000  1249.500000         0.615952             1.009498   \n",
       "std       0.50005   721.759958         0.065815             0.030910   \n",
       "min       0.00000     0.000000         0.350688             0.860374   \n",
       "25%       0.00000   624.750000         0.572878             0.990568   \n",
       "50%       0.50000  1249.500000         0.615384             1.009284   \n",
       "75%       1.00000  1874.250000         0.659705             1.028144   \n",
       "max       1.00000  2499.000000         0.961835             1.160558   \n",
       "\n",
       "       transf_mu_ndt  transf_mu_rel_sp  drift_sbj[1]  drift_sbj[2]  \\\n",
       "count    5000.000000       5000.000000   5000.000000   5000.000000   \n",
       "mean        0.691726          0.530285      0.603799      0.576879   \n",
       "std         0.002199          0.012904      0.090243      0.093931   \n",
       "min         0.681198          0.475725      0.093595      0.157550   \n",
       "25%         0.690373          0.522065      0.549763      0.520853   \n",
       "50%         0.691617          0.530185      0.604913      0.584693   \n",
       "75%         0.693001          0.538358      0.660774      0.638983   \n",
       "max         0.704329          0.589211      0.934712      0.990759   \n",
       "\n",
       "       drift_sbj[3]  drift_sbj[4]  ...  rel_sp_sbj[1]  rel_sp_sbj[2]  \\\n",
       "count   5000.000000   5000.000000  ...    5000.000000    5000.000000   \n",
       "mean       0.599734      0.642007  ...       0.536195       0.526231   \n",
       "std        0.088017      0.093087  ...       0.018094       0.017883   \n",
       "min        0.190691      0.282644  ...       0.469905       0.460770   \n",
       "25%        0.544895      0.581498  ...       0.524433       0.514626   \n",
       "50%        0.601593      0.633981  ...       0.535846       0.526326   \n",
       "75%        0.656278      0.694858  ...       0.548069       0.537657   \n",
       "max        0.994084      1.178273  ...       0.602393       0.590122   \n",
       "\n",
       "       rel_sp_sbj[3]  rel_sp_sbj[4]  rel_sp_sbj[5]  rel_sp_sbj[6]  \\\n",
       "count    5000.000000    5000.000000    5000.000000    5000.000000   \n",
       "mean        0.522930       0.526576       0.520650       0.492087   \n",
       "std         0.018320       0.017435       0.017763       0.020995   \n",
       "min         0.455520       0.465381       0.450294       0.414656   \n",
       "25%         0.510905       0.515375       0.509454       0.477564   \n",
       "50%         0.523374       0.527026       0.521320       0.492551   \n",
       "75%         0.535127       0.538225       0.532493       0.506852   \n",
       "max         0.599665       0.592212       0.595451       0.551932   \n",
       "\n",
       "       rel_sp_sbj[7]  rel_sp_sbj[8]  rel_sp_sbj[9]  rel_sp_sbj[10]  \n",
       "count    5000.000000    5000.000000    5000.000000     5000.000000  \n",
       "mean        0.568101       0.520123       0.549857        0.539313  \n",
       "std         0.021740       0.017393       0.019104        0.018017  \n",
       "min         0.506434       0.461902       0.484085        0.466391  \n",
       "25%         0.552796       0.508784       0.536325        0.527094  \n",
       "50%         0.567758       0.520566       0.549263        0.538623  \n",
       "75%         0.582966       0.531734       0.562528        0.551173  \n",
       "max         0.638467       0.586136       0.617997        0.610974  \n",
       "\n",
       "[8 rows x 46 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.samples.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "sns.set(context = \"talk\", \n",
    "        style = \"white\", \n",
    "        palette = \"husl\",\n",
    "        rc={'figure.figsize':(15, 8)})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we plot the estimated posterior distributions against the generating parameters, to see whether the model parameters are recovering well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = model_fit.plot_posteriors(height=5, show_intervals='HDI')\n",
    "\n",
    "for i, ax in enumerate(g.axes.flatten()):\n",
    "    ax.axvline(data[['drift', 'threshold', 'ndt', 'rel_sp']].mean().values[i], color='grey', linestyle='--')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
