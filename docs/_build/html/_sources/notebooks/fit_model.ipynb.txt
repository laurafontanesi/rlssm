{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "introductory-nashville",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# How to fit a model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "descending-plate",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "To fit a model, there are 3 main things to specify:\n",
    "\n",
    "**1. Data:**\n",
    "The `data`, which should be in the form of a pandas DataFrame.\n",
    "\n",
    "Different model classes might require different columns in the data. You should check in the [API Reference](https://rlssm.readthedocs.io/en/latest/models/model_classes.html) of each model class (or using `model.fit?`) what the required data columns are.\n",
    "\n",
    "**2. The priors (optional):**\n",
    "You can decide whether to use the default priors (which you can see after initializing the model) or whether you want to change the mean or SD of the prior or hyper-prior distributions. Whether you changed the priors or not, they are always printed out when the model starts fitting.\n",
    "\n",
    "**3. Sampling parameters:**\n",
    "The sampling parameters **(number of chains, iterations, warmups, thinning, etc.)** are the arguments to the `pystan.StanModel.sampling()` function, and we simply refer to the [pystan documentation](https://pystan.readthedocs.io/) for a better overview.\n",
    "\n",
    "**Additional learning parameters:**\n",
    "While all sequential sampling models (DDM and race models) **without a learning component** only require a `data` argument, all models with a learning components (RL models, RLDDMs, and RL+race models) also require a `K` argument, which is the total number of different options in a learning block (note that this can be different from the number of options presented in each trial), and `initial_value_learning`, which is the initial Q value (before learning)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "associate-police",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "import rlssm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "electrical-factor",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Non-learning example (non-hierarchical, simulated data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "flying-stomach",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using cached StanModel\n"
     ]
    }
   ],
   "source": [
    "model_ddm = rlssm.DDModel(hierarchical_levels=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aggregate-northern",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# simulate some DDM data:\n",
    "from rlssm.random.random_DDM import simulate_ddm\n",
    "data_ddm = simulate_ddm(\n",
    "    n_trials=400, \n",
    "    gen_drift=.8, \n",
    "    gen_threshold=1.3, \n",
    "    gen_ndt=.23)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "direct-anaheim",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "For the simple, non-hierarchical DDM, it is only necessary to have `rt` and `accuracy` columns:\n",
    "\n",
    "- *rt*, response times in seconds.\n",
    "\n",
    "- *accuracy*, 0 if the incorrect option was chosen, 1 if the correct option was chosen."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "expired-kruger",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "                   drift  rel_sp  threshold   ndt     rt  accuracy\nparticipant trial                                                 \n1           1        0.8     0.5        1.3  0.23  0.895       1.0\n            2        0.8     0.5        1.3  0.23  0.475       1.0\n            3        0.8     0.5        1.3  0.23  0.540       1.0\n            4        0.8     0.5        1.3  0.23  0.332       1.0\n            5        0.8     0.5        1.3  0.23  0.602       1.0",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>drift</th>\n      <th>rel_sp</th>\n      <th>threshold</th>\n      <th>ndt</th>\n      <th>rt</th>\n      <th>accuracy</th>\n    </tr>\n    <tr>\n      <th>participant</th>\n      <th>trial</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">1</th>\n      <th>1</th>\n      <td>0.8</td>\n      <td>0.5</td>\n      <td>1.3</td>\n      <td>0.23</td>\n      <td>0.895</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.8</td>\n      <td>0.5</td>\n      <td>1.3</td>\n      <td>0.23</td>\n      <td>0.475</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.8</td>\n      <td>0.5</td>\n      <td>1.3</td>\n      <td>0.23</td>\n      <td>0.540</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.8</td>\n      <td>0.5</td>\n      <td>1.3</td>\n      <td>0.23</td>\n      <td>0.332</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.8</td>\n      <td>0.5</td>\n      <td>1.3</td>\n      <td>0.23</td>\n      <td>0.602</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_ddm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "verified-daughter",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "20:58:17 - cmdstanpy - INFO - CmdStan start processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting the model using the priors:\n",
      "drift_priors {'mu': 0.5, 'sd': 1}\n",
      "threshold_priors {'mu': 0, 'sd': 0.5}\n",
      "ndt_priors {'mu': 0, 'sd': 0.1}\n"
     ]
    },
    {
     "data": {
      "text/plain": "chain 1 |          | 00:00 Status",
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "8c3aa1f9c63a43aa805a24c13e1945ac"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "chain 2 |          | 00:00 Status",
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "14823b263a71454191415151bf406441"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                                                                                "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "20:58:17 - cmdstanpy - INFO - CmdStan done processing.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "ename": "RuntimeError",
     "evalue": "Error during sampling:\n\nCommand and output files:\nRunSet: chains=2, chain_ids=[1, 2], num_processes=2\n cmd (chain 1):\n\t['/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/DDM/DDM', 'id=1', 'random', 'seed=11404', 'data', 'file=/tmp/tmpput6g169/dp4ommhz.json', 'output', 'file=/tmp/tmpput6g169/DDMmn5glang/DDM-20220705205817_1.csv', 'method=sample', 'num_samples=2000', 'num_warmup=1000', 'thin=1', 'algorithm=hmc', 'adapt', 'engaged=1']\n retcodes=[-1, -1]\n per-chain output files (showing chain 1 only):\n csv_file:\n\t/tmp/tmpput6g169/DDMmn5glang/DDM-20220705205817_1.csv\n console_msgs (if any):\n\t/tmp/tmpput6g169/DDMmn5glang/DDM-20220705205817_0-stdout.txt\nConsider re-running with show_console=True if the above output is unclear!",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mRuntimeError\u001B[0m                              Traceback (most recent call last)",
      "Input \u001B[0;32mIn [5]\u001B[0m, in \u001B[0;36m<cell line: 2>\u001B[0;34m()\u001B[0m\n\u001B[1;32m      1\u001B[0m \u001B[38;5;66;03m# Run 2 chains, with 2000 samples each, 1000 of which warmup, with custom priors:\u001B[39;00m\n\u001B[0;32m----> 2\u001B[0m model_fit_ddm \u001B[38;5;241m=\u001B[39m \u001B[43mmodel_ddm\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfit\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m      3\u001B[0m \u001B[43m    \u001B[49m\u001B[43mdata_ddm\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m      4\u001B[0m \u001B[43m    \u001B[49m\u001B[43mdrift_priors\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m{\u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mmu\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m:\u001B[49m\u001B[38;5;241;43m.5\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43msd\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m:\u001B[49m\u001B[38;5;241;43m1\u001B[39;49m\u001B[43m}\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m      5\u001B[0m \u001B[43m    \u001B[49m\u001B[43mthreshold_priors\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m{\u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mmu\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m:\u001B[49m\u001B[38;5;241;43m0\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43msd\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m:\u001B[49m\u001B[38;5;241;43m.5\u001B[39;49m\u001B[43m}\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m      6\u001B[0m \u001B[43m    \u001B[49m\u001B[43mndt_priors\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m{\u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mmu\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m:\u001B[49m\u001B[38;5;241;43m0\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43msd\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m:\u001B[49m\u001B[38;5;241;43m.1\u001B[39;49m\u001B[43m}\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m      7\u001B[0m \u001B[43m    \u001B[49m\u001B[43mchains\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m2\u001B[39;49m\u001B[43m,\u001B[49m\n\u001B[1;32m      8\u001B[0m \u001B[43m    \u001B[49m\u001B[43miter_warmup\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m1000\u001B[39;49m\u001B[43m,\u001B[49m\n\u001B[1;32m      9\u001B[0m \u001B[43m    \u001B[49m\u001B[43miter_sampling\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m2000\u001B[39;49m\u001B[43m,\u001B[49m\n\u001B[1;32m     10\u001B[0m \u001B[43m    \u001B[49m\u001B[43mthin\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m1\u001B[39;49m\u001B[43m)\u001B[49m\n",
      "File \u001B[0;32m~/PycharmProjects/rlssm/rlssm/model/models_DDM.py:406\u001B[0m, in \u001B[0;36mDDModel.fit\u001B[0;34m(self, data, drift_priors, threshold_priors, ndt_priors, rel_sp_priors, starting_point, drift_trial_mu_priors, drift_trial_sd_priors, rel_sp_trial_mu_priors, rel_sp_trial_sd_priors, corr_matrix_prior, beta_trial_mu_priors, beta_trial_sd_priors, regression_coefficients_priors, include_rhat, include_waic, include_last_values, pointwise_waic, print_diagnostics, **kwargs)\u001B[0m\n\u001B[1;32m    403\u001B[0m     \u001B[38;5;28mprint\u001B[39m(par, \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mpriors[par])\n\u001B[1;32m    405\u001B[0m \u001B[38;5;66;03m# start sampling...\u001B[39;00m\n\u001B[0;32m--> 406\u001B[0m fitted_model \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcompiled_model\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43msample\u001B[49m\u001B[43m(\u001B[49m\u001B[43mdata_dict\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    408\u001B[0m fitted_model \u001B[38;5;241m=\u001B[39m DDMFittedModel(fitted_model,\n\u001B[1;32m    409\u001B[0m                               data,\n\u001B[1;32m    410\u001B[0m                               \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mhierarchical_levels,\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m    421\u001B[0m                               \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mdrift_starting_point_beta_correlation,\n\u001B[1;32m    422\u001B[0m                               \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mdrift_starting_point_regression)\n\u001B[1;32m    424\u001B[0m res \u001B[38;5;241m=\u001B[39m fitted_model\u001B[38;5;241m.\u001B[39mextract_results(include_rhat,\n\u001B[1;32m    425\u001B[0m                                    include_waic,\n\u001B[1;32m    426\u001B[0m                                    pointwise_waic,\n\u001B[1;32m    427\u001B[0m                                    include_last_values)\n",
      "File \u001B[0;32m~/.local/lib/python3.8/site-packages/cmdstanpy/model.py:1188\u001B[0m, in \u001B[0;36mCmdStanModel.sample\u001B[0;34m(self, data, chains, parallel_chains, threads_per_chain, seed, chain_ids, inits, iter_warmup, iter_sampling, save_warmup, thin, max_treedepth, metric, step_size, adapt_engaged, adapt_delta, adapt_init_phase, adapt_metric_window, adapt_step_size, fixed_param, output_dir, sig_figs, save_latent_dynamics, save_profile, show_progress, show_console, refresh, time_fmt, force_one_process_per_chain)\u001B[0m\n\u001B[1;32m   1181\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m runset\u001B[38;5;241m.\u001B[39m_check_retcodes():\n\u001B[1;32m   1182\u001B[0m     msg \u001B[38;5;241m=\u001B[39m (\n\u001B[1;32m   1183\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mError during sampling:\u001B[39m\u001B[38;5;130;01m\\n\u001B[39;00m\u001B[38;5;132;01m{\u001B[39;00merrors\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;130;01m\\n\u001B[39;00m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m   1184\u001B[0m         \u001B[38;5;241m+\u001B[39m \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mCommand and output files:\u001B[39m\u001B[38;5;130;01m\\n\u001B[39;00m\u001B[38;5;132;01m{\u001B[39;00m\u001B[38;5;28mrepr\u001B[39m(runset)\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;130;01m\\n\u001B[39;00m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m   1185\u001B[0m         \u001B[38;5;241m+\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mConsider re-running with show_console=True if the above\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m   1186\u001B[0m         \u001B[38;5;241m+\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m output is unclear!\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m   1187\u001B[0m     )\n\u001B[0;32m-> 1188\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mRuntimeError\u001B[39;00m(msg)\n\u001B[1;32m   1189\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m errors:\n\u001B[1;32m   1190\u001B[0m     msg \u001B[38;5;241m=\u001B[39m (\n\u001B[1;32m   1191\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mNon-fatal error during sampling:\u001B[39m\u001B[38;5;130;01m\\n\u001B[39;00m\u001B[38;5;132;01m{\u001B[39;00merrors\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;130;01m\\n\u001B[39;00m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m   1192\u001B[0m         \u001B[38;5;241m+\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mConsider re-running with show_console=True if the above\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m   1193\u001B[0m         \u001B[38;5;241m+\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m output is unclear!\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[1;32m   1194\u001B[0m     )\n",
      "\u001B[0;31mRuntimeError\u001B[0m: Error during sampling:\n\nCommand and output files:\nRunSet: chains=2, chain_ids=[1, 2], num_processes=2\n cmd (chain 1):\n\t['/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/DDM/DDM', 'id=1', 'random', 'seed=11404', 'data', 'file=/tmp/tmpput6g169/dp4ommhz.json', 'output', 'file=/tmp/tmpput6g169/DDMmn5glang/DDM-20220705205817_1.csv', 'method=sample', 'num_samples=2000', 'num_warmup=1000', 'thin=1', 'algorithm=hmc', 'adapt', 'engaged=1']\n retcodes=[-1, -1]\n per-chain output files (showing chain 1 only):\n csv_file:\n\t/tmp/tmpput6g169/DDMmn5glang/DDM-20220705205817_1.csv\n console_msgs (if any):\n\t/tmp/tmpput6g169/DDMmn5glang/DDM-20220705205817_0-stdout.txt\nConsider re-running with show_console=True if the above output is unclear!"
     ]
    }
   ],
   "source": [
    "# Run 2 chains, with 2000 samples each, 1000 of which warmup, with custom priors:\n",
    "model_fit_ddm = model_ddm.fit(\n",
    "    data_ddm,\n",
    "    drift_priors={'mu':.5, 'sd':1},\n",
    "    threshold_priors={'mu':0, 'sd':.5},\n",
    "    ndt_priors={'mu':0, 'sd':.1},\n",
    "    chains=2,\n",
    "    iter_warmup=1000,\n",
    "    iter_sampling=2000,\n",
    "    thin=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "curious-alloy",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Learning example (hierarchical, real data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "comparative-transportation",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_rl = rlssm.RLModel_2A(hierarchical_levels = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "revised-museum",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# import some example data:\n",
    "data_rl = rlssm.load_example_dataset(hierarchical_levels = 2)\n",
    "\n",
    "data_rl.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "respective-finger",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Since this learning model is only fit on choices, `rt` are not required.\n",
    "\n",
    "Other columns/indexes that should be included are:\n",
    "\n",
    "- *accuracy*, 0 if the incorrect option was chosen, 1 if the correct option was chosen.\n",
    "\n",
    "- *trial_block*, the number of trial in a learning session. Should be integers starting from 1.\n",
    "\n",
    "- *f_cor*, the output from the correct option in the presented pair (the option with higher outcome on average).\n",
    "\n",
    "- *f_inc*, the output from the incorrect option in the presented pair (the option with lower outcome on average).\n",
    "\n",
    "- *cor_option*, the number identifying the correct option in the presented pair (the option with higher outcome on average).\n",
    "\n",
    "- *inc_option*, the number identifying the incorrect option in the presented pair(the option with lower outcome on average).\n",
    "\n",
    "- *block_label*, the number identifying the learning session. Should be integers starting from 1. Set to 1 in case there is only one learning session.\n",
    "\n",
    "If the model is hierarchical, also include:\n",
    "\n",
    "- *participant*, the participant number. Should be integers starting from 1.\n",
    "\n",
    "If increasing_sensitivity is True, also include:\n",
    "\n",
    "- *times_seen*, average number of times the presented options have been seen in a learning session."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "diagnostic-norfolk",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "data_rl.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "trained-landscape",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# Run 2 chains, with 3000 samples each, 1000 of which warmup, with thinning and custom priors:\n",
    "model_fit_rl = model_rl.fit(\n",
    "    data_rl,\n",
    "    K=4,\n",
    "    initial_value_learning=27.5,\n",
    "    alpha_priors={'mu_mu':-.3, 'sd_mu':.1, 'mu_sd':0, 'sd_sd':.1},\n",
    "    sensitivity_priors={'mu_mu':-.1, 'sd_mu':.1, 'mu_sd':0, 'sd_sd':.1},\n",
    "    chains=2,\n",
    "    iter_sampling=3000,\n",
    "    iter_warmup=1000,\n",
    "    print_diagnostics=False, # (not suggested, see below)\n",
    "    thin=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "frank-lindsay",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Diagnostics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "weird-diameter",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "As you can see, the MCMC diagnostics are already printed by default (if you do not want this, you can set `print_diagnostics` to `False`). I refer to https://mc-stan.org/users/documentation/case-studies/divergences_and_bias.html for an excellent explanation of what these diagnostics actually mean and how to assess them.\n",
    "\n",
    "On top of these, you can also check the convergence of the chains and the WAIC:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "civic-student",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_ddm.rhat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "moral-strap",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_rl.rhat.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "conceptual-appointment",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_ddm.waic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "closed-ballot",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_rl.waic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "taken-conjunction",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "If you want to also see the point-wise WAIC, you can set `pointwise_waic` to `True`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "several-kernel",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Save the results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "noble-engagement",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "By default, the model fit results are saved in the same folder, using the `model_label` as filename. you can specify a different location using the `filename` argument."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "weird-brief",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_ddm.to_pickle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "announced-combination",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_rl.to_pickle()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "tropical-hamburg",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Re-load previously saved results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "administrative-overhead",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_ddm = rlssm.load_model_results('/Users/laurafontanesi/git/rlssm/docs/notebooks/DDM.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "weighted-significance",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_rl = rlssm.load_model_results('/Users/laurafontanesi/git/rlssm/docs/notebooks/hierRL_2A.pkl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "colonial-cloud",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The data the model was fit on are stored in `data_info`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "mighty-school",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_rl.data_info['data']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "impressive-bulgarian",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The priors are stored in `priors`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "excited-victory",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_ddm.priors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "representative-express",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_rl.priors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "settled-genetics",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "And different parameter information are stored in `parameter_info`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "extensive-evolution",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_ddm.parameters_info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "digital-arthur",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "model_fit_rl.waic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "foreign-staff",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "And, of course, you can inspect the model's posteriors, see [How to inspect a model](https://rlssm.readthedocs.io/en/latest/notebooks/inspect_model.html) for more details on this."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}